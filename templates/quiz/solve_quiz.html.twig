{% extends 'base.html.twig' %}

{% block meta %}
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
{% endblock %}

{% block title %}
    {{ 'title.solve_quiz'|trans }} {{ quiz.title }}
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>

        #timer {
            border: none;
            outline: none;
            font-size: 1.6rem;
            font-weight: bold;
            text-align: center;
            margin: 20px auto;
            padding: 12px 30px;
            border-radius: 12px;
            background-color: #ffffff;
            color: #000000;
            max-width: 500px;
            margin: 0 auto 10px auto;
        }


        .quiz-question-number {
            font-size: 1.4rem;
            margin-bottom: 20px;
            margin-top: -90px;
            font-weight: bold;
            text-align: center;
            color: #050505;
        }

        .quiz-question {
            max-width: 800px;
            margin: 60px auto;
            padding: 40px 30px;
            background-color: #fff;
            border-radius: 20px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        .quiz-question h2 {
            margin-bottom: 10px;
            text-align: center;
            font-size: 1.8rem;
        }

        .answer-buttons {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .answer-btn {
            padding: 20px 24px;
            font-size: 1.2em;
            cursor: pointer;
            border: 2px solid transparent;
            border-radius: 12px;
            transition: all 0.2s ease;
            width: 100%;
            font-weight: bold;
            height: 90px;
            color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

        }

        .answer-btn:hover {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
        }

        .color-1 {
            background-color: #c82123;
        }

        .color-2 {
            background-color: #fbc02d;
        }

        .color-3 {
            background-color: #43a047;
        }

        .color-4 {
            background-color: #039be5;
        }

        .answer-btn.active {
            border-color: #6a1b9a;
            border-width: 5px;
            border-style: solid;
        }

        .answer-btn:hover {
            filter: brightness(1.1);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
        }

        .btn-primary {
            background-color: #6a1b9a;
            color: white;
            font-weight: bold;
            font-size: 1.2rem;
            padding: 10px 50px;
            border: none;
            border-radius: 999px;
            display: inline-block;
            text-align: center;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
            transition: transform 0.2s ease, filter 0.2s ease;
            margin: 40px auto 0;
            font-family: 'Luckiest Guy', cursive;
            letter-spacing: 2px;
        }

        .btn-primary:hover {
            background-color: #6a1b9a;
            filter: brightness(1.1);
            transform: scale(1.02);
        }

        .btn-primary:focus,
        .btn-primary:active,
        .btn-primary:focus:active {
            background-color: #6a1b9a;
            color: white;
            box-shadow: none;
            outline: none;
        }



        @media (max-width: 600px) {
            .answer-buttons {
                width: 90%;
            }

            .answer-btn {
                font-size: 1em;
                padding: 16px 20px;
                height: auto;
            }
        }
    </style>
{% endblock %}


{% block body %}
    <h1>{{ 'title.solve_quiz'|trans }} {{ quiz.title }}</h1>
    <div id="timer" class="alert alert-info"> <i class="fa-solid fa-clock"></i> <span id="time-remaining">00:00</span></div>
    {% if app.flashes('error') is not empty %}
        <div class="alert alert-danger">
            {% for message in app.flashes('error') %}
                {{ message|trans }}
            {% endfor %}
        </div>
    {% endif %}

    {% if question %}
        <div class="quiz-question">
            <div class="quiz-question-number">Pytanie {{ form.question_index.vars.value + 1 }}/{{ totalQuestions }}</div>
            <h2>{{ question.content }}</h2>
            {{ form_start(form, {'attr': {'id': 'quiz-solve-form'}}) }}
            <div class="btn-group-toggle answer-buttons" data-toggle="buttons">
                {% for child in form.answer %}
                    {% set loopIndex = loop.index %}
                    {{ form_widget(child, {'label': false, 'attr': {'style': 'display:none;'}}) }}
                    <button type="button"
                            class="answer-btn color-{{ loopIndex }}"
                            data-target="{{ child.vars.id }}">
                        {{ child.vars.label }}
                    </button>
                {% endfor %}
            </div>
            {{ form_widget(form.question_index) }}
            <button type="submit" class="btn btn-primary">
                {% if is_last_question %}
                    {{ 'action.finish'|trans }}
                {% else %}
                    {{ 'action.next'|trans }}
                {% endif %}
            </button>
            {{ form_end(form) }}
        </div>
    {% else %}
        <p>{{ 'message.quiz_completed'|trans }}</p>
        <a href="{{ path('quiz_menu_view') }}" class="btn btn-secondary">{{ 'action.back_to_list'|trans }}</a>
    {% endif %}

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const quizId = {{ quiz.id }};
            const startedAt = {{ started_at|default(0) }};
            const timeLimit = {{ time_limit }} * 60;
            const checkStatusUrl = '{{ path('quiz_check_status', {'id': quiz.id}) }}';
            const timerElement = document.getElementById('time-remaining');
            const form = document.getElementById('quiz-solve-form');
            const questionIndexInput = form.querySelector('input[name="quiz_solve[question_index]"]');
            let timeRemaining = timeLimit - (Date.now() / 1000 - startedAt);
            let quizEnded = false;

            function updateTimer() {
                if (quizEnded || timeRemaining <= 0) {
                    if (!quizEnded) {
                        endQuizDueToTime();
                    }
                    return;
                }
                const minutes = Math.floor(timeRemaining / 60);
                const seconds = Math.floor(timeRemaining % 60);
                timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                timeRemaining--;
            }

            function endQuizDueToTime() {
                if (quizEnded) return;
                quizEnded = true;
                alert('{{ 'message.time_limit_exceeded'|trans }}');
                submitFormAndFinalize();
            }

            function submitFormAndFinalize() {
                fetch('{{ path('quiz_solve', {'id': quiz.id}) }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: new URLSearchParams({
                        'quiz_solve[question_index]': questionIndexInput.value,
                        '_token': '{{ csrf_token('quiz_solve_' ~ quiz.id) }}'
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.href = '{{ path('quiz_menu_view') }}';
                        } else if (data.error) {
                            alert(data.error);
                            window.location.href = '{{ path('quiz_menu_view') }}';
                        }
                    })
                    .catch(error => {
                        console.error('Error ending quiz:', error);
                        window.location.href = '{{ path('quiz_menu_view') }}';
                    });
            }

            const timerInterval = setInterval(updateTimer, 1000);
            updateTimer();

            const statusInterval = setInterval(() => {
                fetch(checkStatusUrl, {
                    method: 'GET',
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.isPublished) {
                            clearInterval(timerInterval);
                            clearInterval(statusInterval);
                            alert('{{ 'message.quiz_expired'|trans }}');
                            submitFormAndFinalize();
                        }
                    })
                    .catch(error => console.error('Error checking status:', error));
            }, 10000);

            form.addEventListener('submit', () => {
                clearInterval(timerInterval);
                clearInterval(statusInterval);
            });

            window.onpopstate = function(event) {
                if (event.state) {
                    window.location.href = '{{ path('quiz_menu_view') }}';
                }
            };
            history.pushState(null, document.title, window.location.href);

            document.querySelectorAll('.answer-btn').forEach(button => {
                button.addEventListener('click', () => {
                    document.querySelectorAll('.answer-btn').forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');
                    const targetId = button.dataset.target;
                    const radio = document.getElementById(targetId);
                    if (radio) {
                        radio.checked = true;
                    }
                });
            });
        });
    </script>
{% endblock %}