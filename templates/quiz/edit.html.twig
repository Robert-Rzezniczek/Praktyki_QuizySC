{% extends 'base.html.twig' %}

{% block title %}
    {% if step is defined %}
        Edytuj Quiz - Krok {{ step }}
    {% else %}
        Edytuj Quiz
    {% endif %}
{% endblock %}

{% block body %}
    <div class="container my-4">
        <h1 class="display-5 text-primary mb-4">
            {% if brandingEdit is defined %}
                Edytuj branding quizu
            {% elseif step is defined and maxSteps is defined %}
                Edytuj Quiz - Krok {{ step }} z {{ maxSteps }}
            {% else %}
                Edytuj Quiz
            {% endif %}
        </h1>

        {{ form_start(form, {
            'attr': {'class': 'needs-validation', 'novalidate': 'novalidate'},
            'action': form.vars.action,
            'method': form.vars.method,
            'enctype': 'multipart/form-data'
        }) }}

        {% if brandingEdit is defined %}
        {{ form_row(form.brandName) }}
        {{ form_row(form.branddescription) }}
        {{ form_row(form.logoFile) }}
        {{ form_errors(form.logoFile) }}
        {% elseif step is defined %}
        {% if step == 1 %}
            {{ form_row(form.title) }}
            {{ form_row(form.description) }}
        {% elseif step == 2 %}
            <div data-collection-holder="questions"
                 data-prototype="{{ form_widget(form.questions.vars.prototype)|e('html_attr') }}">
                {% if form.questions is defined and form.questions|length > 0 %}
                    {% for question in form.questions %}
                        <div class="question-item card mt-3 p-3 border" data-question-index="{{ loop.index0 }}">
                            <h6 class="question-header">Pytanie {{ loop.index }}</h6>
                            {{ form_row(question.content) }}
                            {{ form_row(question.points) }}
                            <div data-collection-holder="answers"
                                 data-index="{{ question.answers|length }}"
                                 data-prototype="{% set prototype %}
                                    <div class='answer-item card mt-2 p-2 border'>
                                        <h6>Odp. __answers_name__</h6>
                                        <div class='row align-items-center'>
                                            <div class='col-md-2'>
                                                <div class='form-check'>
                                                    {{ form_widget(question.answers.vars.prototype.isCorrect)|replace({'__name__': '__answers_name__'})|raw }}
                                                    {{ form_label(question.answers.vars.prototype.isCorrect)|replace({'__name__': '__answers_name__'})|raw }}
                                                </div>
                                            </div>
                                            <div class='col-md-10'>
                                                {{ form_widget(question.answers.vars.prototype.content)|replace({'__name__': '__answers_name__'})|raw }}
                                                {{ form_errors(question.answers.vars.prototype.content)|replace({'__name__': '__answers_name__'})|raw }}
                                            </div>
                                        </div>
                                        <button type='button' class='remove-answer btn btn-danger btn-sm mt-2'>Usuń</button>
                                    </div>
                                 {% endset %}{{ prototype|e('html_attr') }}"
                                 class="answers-collection">
                                {% for answer in question.answers %}
                                    <div class="answer-item card mt-2 p-2 border">
                                        <h6>Odp. {{ loop.index }}</h6>
                                        <div class="row align-items-center">
                                            <div class="col-10">
                                                {{ form_widget(answer.content) }}
                                            </div>
                                            <div class="col-2">
                                                <div class="form-check">
                                                    {{ form_widget(answer.isCorrect) }}
                                                    {{ form_label(answer.isCorrect) }}
                                                </div>
                                            </div>
                                        </div>
                                        <button type="button" class="remove-answer btn btn-danger btn-sm mt-2" style="display: {% if loop.index0 > 0 %}inline-block{% else %}none{% endif %};">Usuń</button>
                                    </div>
                                {% endfor %}
                            </div>
                            <button type="button" class="add-answer btn btn-secondary mt-2 mb-2">Dodaj odpowiedź</button>
                            <button type="button" class="remove-question btn btn-danger btn-sm mt-2" style="display: {% if loop.index0 > 0 %}inline-block{% else %}none{% endif %};">Usuń pytanie</button>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="question-item card mt-3 p-3 border" data-question-index="0">
                        <h6 class="question-header">Pytanie 1</h6>
                        {{ form_row(form.questions.vars.prototype.content|replace({'__name__': 0})) }}
                        {{ form_row(form.questions.vars.prototype.points|replace({'__name__': 0})) }}
                        <div data-collection-holder="answers"
                             data-index="0"
                             data-prototype="{% set prototype %}
                                <div class='answer-item card mt-2 p-2 border'>
                                    <h6>Odp. __answers_name__</h6>
                                    <div class='row align-items-center'>
                                        <div class='col-md-2'>
                                            <div class='form-check'>
                                                {{ form_widget(form.questions.vars.prototype.answers.vars.prototype.isCorrect)|replace({'__name__': 0})|raw }}
                                                {{ form_label(form.questions.vars.prototype.answers.vars.prototype.isCorrect)|replace({'__name__': 0})|raw }}
                                            </div>
                                        </div>
                                        <div class='col-md-10'>
                                            {{ form_widget(form.questions.vars.prototype.answers.vars.prototype.content)|replace({'__name__': 0})|raw }}
                                            {{ form_errors(form.questions.vars.prototype.answers.vars.prototype.content)|replace({'__name__': 0})|raw }}
                                        </div>
                                    </div>
                                    <button type='button' class='remove-answer btn btn-danger btn-sm mt-2'>Usuń</button>
                                </div>
                             {% endset %}{{ prototype|e('html_attr') }}"
                             class="answers-collection">
                            <div class="answer-item card mt-2 p-2 border">
                                <h6>Odp. 1</h6>
                                <div class="row align-items-center">
                                    <div class="col-10">
                                        {{ form_widget(form.questions.vars.prototype.answers.vars.prototype.content|replace({'__name__': 0})) }}
                                        {{ form_errors(form.questions.vars.prototype.answers.vars.prototype.content|replace({'__name__': 0})) }}
                                    </div>
                                    <div class="col-2">
                                        <div class="form-check">
                                            {{ form_widget(form.questions.vars.prototype.answers.vars.prototype.isCorrect|replace({'__name__': 0})) }}
                                            {{ form_label(form.questions.vars.prototype.answers.vars.prototype.isCorrect|replace({'__name__': 0})) }}
                                        </div>
                                    </div>
                                </div>
                                <button type="button" class="remove-answer btn btn-danger btn-sm mt-2" style="display: none;">Usuń</button>
                            </div>
                        </div>
                        <button type="button" class="add-answer btn btn-secondary mt-2 mb-2">Dodaj odpowiedź</button>
                        <button type="button" class="remove-question btn btn-danger btn-sm mt-2" style="display: none;">Usuń pytanie</button>
                    </div>
                {% endif %}
                <button type="button" class="add-question btn btn-primary mt-3 mb-2">Dodaj pytanie</button>
            </div>
        {% elseif step == 3 %}
            {{ form_row(form.timeLimit) }}
            {{ form_row(form.isPublished) }}
        {% endif %}
        {% endif %}
        <div class="mt-3">
            {% if brandingEdit is defined %}
                <button type="submit" class="btn btn-primary">Zapisz</button>
                <a href="{{ path('quiz_view', {'id': quiz.id}) }}" class="btn btn-secondary">Anuluj</a>
            {% else %}
                <button type="submit" class="btn btn-primary">
                    {% if step is defined and step < maxSteps %}
                        Dalej
                    {% else %}
                        Zapisz
                    {% endif %}
                </button>
                {% if step is defined and step > 1 %}
                    <a href="{{ path('quiz_edit_step', {'id': quiz.id, 'step': step - 1}) }}" class="btn btn-secondary">Wstecz</a>
                {% else %}
                    <a href="{{ path('quiz_index') }}" class="btn btn-secondary">Anuluj</a>
                {% endif %}
            {% endif %}
        </div>


        {{ form_end(form) }}

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const translations = {
                    'remove_question': '{{ 'action.remove_question'|trans|escape('js') }}',
                    'remove_answer': '{{ 'action.remove_answer'|trans|escape('js') }}',
                    'add_answer': '{{ 'action.add_answer'|trans|escape('js') }}'
                };

                function addRemoveButton(container, type, updateIndexCallback) {
                    const removeButton = document.createElement('button');
                    removeButton.type = 'button';
                    removeButton.className = 'btn btn-danger btn-sm mt-2 remove-' + type;
                    removeButton.innerHTML = '<i class="bi bi-trash"></i> ' + (type === 'question' ? translations['remove_question'] : translations['remove_answer']);
                    container.appendChild(removeButton);
                    removeButton.addEventListener('click', function () {
                        container.remove();
                        if (updateIndexCallback) updateIndexCallback();
                    });
                }

                function updateQuestionIndices() {
                    const questionItems = questionCollectionHolder.querySelectorAll('.question-item');
                    questionItems.forEach((item, index) => {
                        item.dataset.questionIndex = index;
                        const questionHeader = item.querySelector('.question-header');
                        if (questionHeader) questionHeader.textContent = `Pytanie ${index + 1}`;
                        const answerCollectionHolder = item.querySelector('[data-collection-holder="answers"]');
                        if (answerCollectionHolder) {
                            const answerItems = answerCollectionHolder.querySelectorAll('.answer-item');
                            answerItems.forEach((answerItem, answerIndex) => {
                                const answerHeader = answerItem.querySelector('h6');
                                if (answerHeader) answerHeader.textContent = `Odp. ${answerIndex + 1}`;
                                const inputs = answerItem.querySelectorAll('input, textarea');
                                inputs.forEach(input => {
                                    if (input.name) {
                                        input.name = input.name.replace(/\[questions\]\[\d+\]/, `[questions][${index}]`);
                                        input.id = input.id.replace(/form_questions_\d+_/, `form_questions_${index}_`);
                                    }
                                });
                                const labels = answerItem.querySelectorAll('label');
                                labels.forEach(label => {
                                    if (label.htmlFor) {
                                        label.htmlFor = label.htmlFor.replace(/form_questions_\d+_/, `form_questions_${index}_`);
                                    }
                                });
                            });
                            answerCollectionHolder.dataset.index = answerItems.length;
                            const firstAnswer = answerCollectionHolder.querySelector('.answer-item .remove-answer');
                            if (firstAnswer) firstAnswer.style.display = 'none';
                            // Kontroluj widoczność przycisku dodawania odpowiedzi
                            const addAnswerButton = answerCollectionHolder.parentNode.querySelector('.add-answer');
                            if (addAnswerButton) {
                                addAnswerButton.style.display = answerItems.length >= 4 ? 'none' : 'inline-block';
                            }
                        }
                        const firstQuestionRemove = item.querySelector('.remove-question');
                        if (firstQuestionRemove) firstQuestionRemove.style.display = index === 0 ? 'none' : 'inline-block';
                    });
                }

                const questionCollectionHolder = document.querySelector('[data-collection-holder="questions"]');
                if (questionCollectionHolder) {
                    let questionIndex = questionCollectionHolder.querySelectorAll('.question-item').length || 0;
                    const addQuestionButton = document.querySelector('.add-question');
                    const questionPrototype = questionCollectionHolder.dataset.prototype;

                    addQuestionButton.addEventListener('click', function () {
                        const newForm = questionPrototype.replace(/__name__/g, questionIndex);
                        const div = document.createElement('div');
                        div.className = 'question-item card mt-3 p-3 border';
                        div.innerHTML = newForm;

                        const questionHeader = document.createElement('h6');
                        questionHeader.className = 'question-header';
                        questionHeader.textContent = `Pytanie ${questionIndex + 1}`;
                        div.insertBefore(questionHeader, div.firstChild);
                        questionCollectionHolder.appendChild(div);
                        addRemoveButton(div, 'question', updateQuestionIndices);

                        const answerCollectionHolder = div.querySelector('[data-collection-holder="answers"]');
                        if (answerCollectionHolder) {
                            answerCollectionHolder.dataset.index = 0;
                            const addAnswerButton = document.createElement('button');
                            addAnswerButton.type = 'button';
                            addAnswerButton.className = 'add-answer btn btn-secondary mt-2 mb-2';
                            addAnswerButton.innerHTML = '<i class="bi bi-plus-circle"></i> ' + translations['add_answer'];
                            answerCollectionHolder.parentNode.appendChild(addAnswerButton);

                            const answerPrototype = answerCollectionHolder.dataset.prototype;

                            addAnswerButton.addEventListener('click', function () {
                                const answerIndex = parseInt(answerCollectionHolder.dataset.index) || 0;
                                const currentAnswersCount = answerCollectionHolder.querySelectorAll('.answer-item').length;

                                if (currentAnswersCount >= 4) {
                                    return; // Nie dodawaj więcej niż 4 odpowiedzi
                                }

                                const newAnswerForm = answerPrototype.replace(/__answers_name__/g, answerIndex);
                                const answerDiv = document.createElement('div');
                                answerDiv.className = 'answer-item card mt-2 p-2 border';
                                answerDiv.innerHTML = newAnswerForm;
                                const answerHeader = document.createElement('h6');
                                answerHeader.textContent = `Odp. ${parseInt(answerIndex) + 1}`;
                                answerDiv.insertBefore(answerHeader, answerDiv.firstChild);
                                answerCollectionHolder.appendChild(answerDiv);

                                addRemoveButton(answerDiv, 'answer', () => {
                                    answerCollectionHolder.dataset.index = answerCollectionHolder.querySelectorAll('.answer-item').length;
                                    updateQuestionIndices();
                                });

                                answerCollectionHolder.dataset.index = answerIndex + 1;

                                if (answerCollectionHolder.querySelectorAll('.answer-item').length >= 4) {
                                    addAnswerButton.style.display = 'none';
                                }

                                updateQuestionIndices();
                            });

                            // Dodaj jedną odpowiedź domyślnie dla nowych pytań
                            const answerIndex = 0;
                            const newAnswerForm = answerPrototype.replace(/__answers_name__/g, answerIndex);
                            const answerDiv = document.createElement('div');
                            answerDiv.className = 'answer-item card mt-2 p-2 border';
                            answerDiv.innerHTML = newAnswerForm;
                            const answerHeader = document.createElement('h6');
                            answerHeader.textContent = `Odp. ${answerIndex + 1}`;
                            answerDiv.insertBefore(answerHeader, answerDiv.firstChild);
                            answerCollectionHolder.appendChild(answerDiv);
                            addRemoveButton(answerDiv, 'answer', () => {
                                answerCollectionHolder.dataset.index = answerCollectionHolder.querySelectorAll('.answer-item').length;
                                updateQuestionIndices();
                            });
                            answerCollectionHolder.dataset.index = answerIndex + 1;
                        }

                        questionIndex++;
                        updateQuestionIndices();
                    });

                    // Inicjalizacja istniejących elementów
                    questionCollectionHolder.querySelectorAll('.question-item').forEach((item) => {
                        addRemoveButton(item, 'question', updateQuestionIndices);
                        const answerCollectionHolder = item.querySelector('[data-collection-holder="answers"]');
                        if (answerCollectionHolder) {
                            answerCollectionHolder.querySelectorAll('.answer-item').forEach((answerItem, answerIndex) => {
                                addRemoveButton(answerItem, 'answer', () => {
                                    answerCollectionHolder.dataset.index = answerCollectionHolder.querySelectorAll('.answer-item').length;
                                    updateQuestionIndices();
                                });
                            });

                            const addAnswerButton = item.querySelector('.add-answer');
                            if (addAnswerButton) {
                                const answerPrototype = answerCollectionHolder.dataset.prototype;
                                addAnswerButton.addEventListener('click', function () {
                                    const answerIndex = parseInt(answerCollectionHolder.dataset.index) || 0;
                                    const currentAnswersCount = answerCollectionHolder.querySelectorAll('.answer-item').length;

                                    if (currentAnswersCount >= 4) {
                                        return; // Nie dodawaj więcej niż 4 odpowiedzi
                                    }

                                    const newAnswerForm = answerPrototype.replace(/__answers_name__/g, answerIndex);
                                    const answerDiv = document.createElement('div');
                                    answerDiv.className = 'answer-item card mt-2 p-2 border';
                                    answerDiv.innerHTML = newAnswerForm;
                                    const answerHeader = document.createElement('h6');
                                    answerHeader.textContent = `Odp. ${answerIndex + 1}`;
                                    answerDiv.insertBefore(answerHeader, answerDiv.firstChild);
                                    answerCollectionHolder.appendChild(answerDiv);

                                    addRemoveButton(answerDiv, 'answer', () => {
                                        answerCollectionHolder.dataset.index = answerCollectionHolder.querySelectorAll('.answer-item').length;
                                        updateQuestionIndices();
                                    });

                                    answerCollectionHolder.dataset.index = answerIndex + 1;

                                    if (answerCollectionHolder.querySelectorAll('.answer-item').length >= 4) {
                                        addAnswerButton.style.display = 'none';
                                    }

                                    updateQuestionIndices();
                                });
                            }
                        }
                    });

                    // Ukryj przyciski "Dodaj odpowiedź", jeśli już jest 4 odpowiedzi przy starcie
                    document.querySelectorAll('.answers-collection').forEach(holder => {
                        const addAnswerBtn = holder.parentNode.querySelector('.add-answer');
                        if (holder.querySelectorAll('.answer-item').length >= 4 && addAnswerBtn) {
                            addAnswerBtn.style.display = 'none';
                        }
                    });

                    updateQuestionIndices();
                }
            });
        </script>

        <style>
            .question-item {
                position: relative;
                background-color: #f8f9fa;
                border-radius: 0.25rem;
                margin-bottom: 1rem;
            }
            .question-item .form-label {
                font-weight: bold;
                color: #343a40;
            }
            .question-header {
                font-weight: bold;
                margin-bottom: 0.5rem;
            }
            .answer-item {
                position: relative;
                background-color: #e9ecef;
                border-radius: 0.25rem;
                margin-top: 0.5rem;
                padding: 0.5rem;
            }
            .answer-item .form-label {
                font-weight: bold;
                color: #495057;
            }
            .remove-question, .remove-answer {
                position: absolute;
                top: 10px;
                right: 10px;
            }
            .row.align-items-center .col-10 .form-control {
                width: 100%;
            }
            .row.align-items-center .col-2 .form-check {
                margin-top: 0;
            }
        </style>
    </div>
{% endblock %}