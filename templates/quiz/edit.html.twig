{% extends 'base.html.twig' %}

{% block meta %}
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
{% endblock %}

{% block title %}
    {% if step is defined %}
        Edytuj Quiz - Krok {{ step }}
    {% else %}
        Edytuj Quiz
    {% endif %}
{% endblock %}

{% block body %}
    <div class="container my-4">
        <h1 class="display-5 text-primary mb-4">
            {% if brandingEdit is defined %}
                Edytuj branding quizu
            {% elseif step is defined and maxSteps is defined %}
                Edytuj Quiz - Krok {{ step }} z {{ maxSteps }}
            {% else %}
                Edytuj Quiz
            {% endif %}
        </h1>

        {{ form_start(form, {
            'attr': {'class': 'needs-validation', 'novalidate': 'novalidate'},
            'action': form.vars.action,
            'method': form.vars.method,
            'enctype': 'multipart/form-data'
        }) }}

        {% if brandingEdit is defined %}
            {{ form_row(form.brandName) }}
            {{ form_row(form.branddescription) }}
            {{ form_row(form.logoFile) }}
            {{ form_errors(form.logoFile) }}
        {% elseif step is defined %}
            {% if step == 1 %}
                {{ form_row(form.title) }}
                {{ form_row(form.description) }}
            {% elseif step == 2 %}
                <div data-collection-holder="questions"
                     data-index="{{ form.questions|length }}"
                     data-prototype="{{ form_widget(form.questions.vars.prototype)|e('html_attr') }}">
                    {% for question in form.questions %}
                        <div class="question-item card mt-3 p-3 border" data-question-index="{{ loop.index0 }}">
                            <h6 class="question-header">Pytanie {{ loop.index }}</h6>
                            {{ form_row(question.content) }}
                            {{ form_row(question.points) }}

                            <div data-collection-holder="answers"
                                 data-index="{{ question.answers|length }}"
                                 data-prototype="{{ form_widget(question.answers.vars.prototype)|e('html_attr') }}"
                                 class="answers-collection">
                                {% for answer in question.answers %}
                                    <div class="answer-item card mt-2 p-2 border">
                                        <h6>Odp. {{ loop.index }}</h6>
                                        <div class="row align-items-center">
                                            <div class="col-md-2">
                                                <div class="form-check">
                                                    {{ form_widget(answer.isCorrect) }}
                                                    {{ form_label(answer.isCorrect) }}
                                                </div>
                                            </div>
                                            <div class="col-md-10">
                                                {{ form_widget(answer.content) }}
                                            </div>
                                        </div>
                                        <button type="button" class="remove-answer btn btn-danger btn-sm mt-2" style="display: {% if loop.index0 > 0 %}inline-block{% else %}none{% endif %};">Usuń</button>
                                    </div>
                                {% endfor %}
                            </div>

                            <button type="button" class="remove-question btn btn-danger btn-sm mt-2" style="display: {% if loop.index0 > 0 %}inline-block{% else %}none{% endif %};">Usuń</button>
                        </div>
                    {% endfor %}
                </div>
                <button type="button" class="add-question btn btn-primary mt-3 mb-2">Dodaj pytanie</button>

            {% elseif step == 3 %}
                {{ form_row(form.timeLimit) }}
                {{ form_row(form.isPublished) }}
            {% endif %}
        {% endif %}

        <div class="mt-3">
            {% if brandingEdit is defined %}
                <button type="submit" class="btn btn-primary">Zapisz</button>
                <a href="{{ path('quiz_view', {'id': quiz.id}) }}" class="btn btn-secondary">Anuluj</a>
            {% else %}
                <button type="submit" class="btn btn-primary">
                    {% if step is defined and step < maxSteps %}
                        Dalej
                    {% else %}
                        Zapisz
                    {% endif %}
                </button>
                {% if step is defined and step > 1 %}
                    <a href="{{ path('quiz_edit_step', {'id': quiz.id, 'step': step - 1}) }}" class="btn btn-secondary">Wstecz</a>
                {% else %}
                    <a href="{{ path('quiz_index') }}" class="btn btn-secondary">Anuluj</a>
                {% endif %}
            {% endif %}
        </div>

        {{ form_end(form) }}

        <style>
            .question-item {
                background-color: #f8f9fa;
                border-radius: 0.25rem;
                margin-bottom: 1rem;
                position: relative;
            }
            .question-header {
                font-weight: bold;
                margin-bottom: 0.5rem;
            }
            .answer-item {
                background-color: #e9ecef;
                border-radius: 0.25rem;
                margin-top: 0.5rem;
                padding: 0.5rem;
                position: relative;
            }
            .remove-question, .remove-answer {
                position: absolute;
                top: 10px;
                right: 10px;
            }
        </style>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        function restyleAnswerItem(answerElem) {
            const input = answerElem.querySelector('input[type="text"]');
            const checkbox = answerElem.querySelector('input[type="checkbox"]');
            const label = answerElem.querySelector('label');
            const wrapper = document.createElement('div');
            wrapper.className = 'row align-items-center';
            const colCheckbox = document.createElement('div');
            colCheckbox.className = 'col-md-2';
            const formCheck = document.createElement('div');
            formCheck.className = 'form-check';
            if (checkbox) formCheck.appendChild(checkbox);
            if (label) formCheck.appendChild(label);
            colCheckbox.appendChild(formCheck);
            const colInput = document.createElement('div');
            colInput.className = 'col-md-10';
            if (input) colInput.appendChild(input);
            wrapper.append(colCheckbox, colInput);

            answerElem.innerHTML = '';
            answerElem.appendChild(wrapper);

            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.className = 'remove-answer btn btn-danger btn-sm mt-2';
            removeBtn.textContent = 'Usuń';
            removeBtn.addEventListener('click', () => {
                const parent = answerElem.parentElement;
                answerElem.remove();
                parent.dataset.index = parent.querySelectorAll('.answer-item').length;
                updateAddAnswerVisibility(parent);
            });
            answerElem.appendChild(removeBtn);
        }

        function updateAddAnswerVisibility(container) {
            const count = container.querySelectorAll('.answer-item').length;
            const btn = container.closest('.question-item').querySelector('.add-answer');
            if (btn) btn.style.display = count >= 4 ? 'none' : 'inline-block';
        }

        function bindAnswerCollection(container) {
            container.dataset.index = container.querySelectorAll('.answer-item').length;
            const prototype = container.dataset.prototype;
            const parent = container.closest('.question-item');

            let btn = parent.querySelector('.add-answer');
            if (!btn) {
                btn = document.createElement('button');
                btn.type = 'button';
                btn.className = 'add-answer btn btn-secondary mt-2 mb-2';
                btn.textContent = 'Dodaj odpowiedź';
                parent.appendChild(btn);
            }
            btn.addEventListener('click', () => {
                if (container.querySelectorAll('.answer-item').length >= 4) return;
                const idx = parseInt(container.dataset.index);
                const div = document.createElement('div');
                div.className = 'answer-item card mt-2 p-2 border';
                div.innerHTML = prototype.replace(/__answers_name__/g, idx);
                restyleAnswerItem(div);
                container.appendChild(div);
                container.dataset.index = idx + 1;
                updateAddAnswerVisibility(container);
            });

            container.querySelectorAll('.answer-item').forEach(restyleAnswerItem);
            updateAddAnswerVisibility(container);
        }

        function bindQuestion(questionElem) {
            const remQ = questionElem.querySelector('.remove-question');
            if (remQ) remQ.addEventListener('click', () => questionElem.remove());
            const collection = questionElem.querySelector('[data-collection-holder="answers"]');
            if (collection) bindAnswerCollection(collection);
        }

        function initAll() {
            document.querySelectorAll('.question-item').forEach(bindQuestion);
            document.querySelectorAll('.answers-collection').forEach(bindAnswerCollection);
        }

        document.addEventListener('DOMContentLoaded', () => {
            initAll();

            const questionHolder = document.querySelector('[data-collection-holder="questions"]');
            const addQ = document.querySelector('.add-question');
            let qIndex = parseInt(questionHolder.dataset.index);

            addQ.addEventListener('click', () => {
                const protoQ = questionHolder.dataset.prototype;
                const div = document.createElement('div');
                div.className = 'question-item card mt-3 p-3 border';
                div.innerHTML = `<h6 class="question-header">Pytanie ${qIndex + 1}</h6>` + protoQ.replace(/__name__/g, qIndex);
                questionHolder.appendChild(div);
                bindQuestion(div);
                questionHolder.dataset.index = ++qIndex;
            });
        });

        window.addEventListener('load', initAll);
    </script>
{% endblock %}