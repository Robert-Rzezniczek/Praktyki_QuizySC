{% extends 'base.html.twig' %}

{% block title %}{{ 'title.create_quiz'|trans }}{% endblock %}

{% block body %}
    <div class="container my-5">
        <h1 class="display-6 text-primary text-center mb-5">{{ 'title.create_quiz'|trans }}</h1>

        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label is same as('success') ? 'success' : 'danger' }} alert-dismissible fade show" role="alert">
                    {{ message|trans }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endfor %}

        <div class="card shadow-sm">
            <div class="card-body p-4">
                {{ form_start(form) }}
                <div class="step-content">
                    <h4>Krok {{ step }} z {{ maxSteps }}</h4>

                    {% if 1 is same as(step) %}
                        <div id="step1">
                            {{ form_row(form.title) }}
                            {{ form_row(form.description) }}
                        </div>

                    {% elseif 2 is same as(step) %}
                        <div id="step2">
                            <div id="questions-collection"
                                 data-prototype="
                                    <div class='question-item mb-4 p-4 bg-white rounded shadow-sm border'>
                                        <h5>Pytanie</h5>
                                        {{ form_widget(form.questions.vars.prototype.content)|e('html_attr') }}
                                        {{ form_widget(form.questions.vars.prototype.points)|e('html_attr') }}
                                        <div class='answers-collection mt-3' data-prototype='
                                            <div class=&quot;answer-item mb-2 d-flex align-items-center p-3 bg-light rounded border&quot;>
                                                <div class=&quot;me-3&quot;>{{ form_widget(form.questions.vars.prototype.answers.vars.prototype.isCorrect, {'label': false})|e('html_attr') }}</div>
                                                <div class=&quot;flex-grow-1&quot;>{{ form_widget(form.questions.vars.prototype.answers.vars.prototype.content)|e('html_attr') }}</div>
                                                <button type=&quot;button&quot; class=&quot;btn btn-danger btn-sm remove-answer&quot;>Usuń</button>
                                            </div>'>
                                        </div>
                                        <button type='button' class='btn btn-success btn-sm add-answer'>Dodaj odpowiedź</button>
                                        <button type='button' class='btn btn-danger btn-sm remove-question'>Usuń pytanie</button>
                                    </div>">
                                {% for questionForm in form.questions %}
                                    <div class="question-item mb-4 p-4 bg-white rounded shadow-sm border">
                                        <h5>Pytanie</h5>
                                        {{ form_row(questionForm.content) }}
                                        {{ form_row(questionForm.points) }}

                                        <div class="answers-collection mt-3" data-prototype="{{ form_widget(questionForm.answers.vars.prototype)|e('html_attr') }}">
                                            {% for answerForm in questionForm.answers %}
                                                <div class="answer-item mb-2 d-flex align-items-center p-3 bg-light rounded border">
                                                    <div class="me-3">
                                                        {{ form_widget(answerForm.isCorrect, {'label': false}) }}
                                                    </div>
                                                    <div class="flex-grow-1">
                                                        {{ form_widget(answerForm.content) }}
                                                    </div>
                                                    <button type="button" class="btn btn-danger btn-sm remove-answer">Usuń</button>
                                                </div>
                                            {% endfor %}
                                        </div>

                                        <button type="button" class="btn btn-success btn-sm add-answer">Dodaj odpowiedź</button>
                                        <button type="button" class="btn btn-danger btn-sm remove-question">Usuń pytanie</button>
                                    </div>
                                {% endfor %}
                            </div>
                            <button type="button" class="btn btn-primary mt-3 add-question">Dodaj pytanie</button>
                        </div>

                    {% elseif 3 is same as(step) %}
                        <div id="step3">
                            {{ form_row(form.timeLimit) }}
                        </div>
                    {% endif %}
                </div>

                <div class="d-flex justify-content-between mt-4">
                    {% if 1 is not same as(step) %}
                        <a href="{{ path('quiz_create_step', {'step': step - 1}) }}" class="btn btn-secondary">Wstecz</a>
                    {% endif %}
                    {% if 3 is same as(step) %}
                        <button type="submit" class="btn btn-success">Zakończ</button>
                    {% else %}
                        <button type="submit" class="btn btn-primary">Dalej</button>
                    {% endif %}
                </div>

                {{ form_end(form) }}
            </div>
        </div>
    </div>

    <style>
        .question-item {
            background-color: #f9f9f9;
            border-left: 4px solid #0d6efd;
        }

        .answer-item {
            background-color: #e9ecef;
            border-left: 4px solid #198754;
        }

        .answer-item input[type="checkbox"] {
            transform: scale(1.2);
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let questionIndex = document.querySelectorAll('.question-item').length;
            let addQuestionBtn = document.querySelector('.add-question');

            // Dodawanie pytania
            addQuestionBtn.addEventListener('click', function() {
                let prototype = document.getElementById('questions-collection').dataset.prototype;
                let newQuestion = prototype.replace(/__name__/g, questionIndex);
                document.getElementById('questions-collection').insertAdjacentHTML('beforeend', newQuestion);
                questionIndex++;
                updateButtons();
            });

            // Usuwanie pytania
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('remove-question')) {
                    e.target.closest('.question-item').remove();
                    updateButtons();
                }
            });

            // Dodawanie odpowiedzi
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('add-answer')) {
                    let answersCollection = e.target.closest('.question-item').querySelector('.answers-collection');
                    let answerItems = answersCollection.querySelectorAll('.answer-item');
                    if (answerItems.length < 4) {
                        let prototype = answersCollection.dataset.prototype;
                        let index = answerItems.length;
                        let newAnswer = prototype.replace(/__name__/g, index);
                        answersCollection.insertAdjacentHTML('beforeend', newAnswer);
                        updateButtons();
                    }
                }
            });

            // Usuwanie odpowiedzi
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('remove-answer')) {
                    let answersCollection = e.target.closest('.answers-collection');
                    let answerItems = answersCollection.querySelectorAll('.answer-item');
                    if (answerItems.length > 2) {
                        e.target.closest('.answer-item').remove();
                        updateButtons();
                    }
                }
            });

            function updateButtons() {
                let questions = document.querySelectorAll('.question-item');
                questions.forEach(q => {
                    let removeBtn = q.querySelector('.remove-question');
                    removeBtn.style.display = questions.length > 1 ? 'inline-block' : 'none';

                    let answers = q.querySelectorAll('.answer-item');
                    let addBtn = q.querySelector('.add-answer');
                    addBtn.disabled = answers.length >= 4;

                    answers.forEach(a => {
                        let removeBtn = a.querySelector('.remove-answer');
                        removeBtn.style.display = answers.length > 2 ? 'inline-block' : 'none';
                    });
                });
            }

            updateButtons();
        });
    </script>
{% endblock %}
